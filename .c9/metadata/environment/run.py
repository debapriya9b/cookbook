{"filter":false,"title":"run.py","tooltip":"/run.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":81,"column":9},"end":{"row":81,"column":10},"action":"remove","lines":["s"],"id":2619}],[{"start":{"row":87,"column":9},"end":{"row":87,"column":10},"action":"remove","lines":["s"],"id":2620}],[{"start":{"row":0,"column":0},"end":{"row":241,"column":15},"action":"remove","lines":["# importing modules","import os","import math","from flask import Flask, render_template, redirect, request, url_for, session, flash","from flask_pymongo import PyMongo, pymongo","from bson.objectid import ObjectId","","# declaring app name","app = Flask(__name__)","","app.config[\"SECRET_KEY\"] = '7473f88e01ba1bf3f40ce59c38d644ff'","","app.config[\"MONGO_DBNAME\"] = 'cookbook'","app.config[\"MONGO_URI\"] = 'mongodb+srv://debapriya9b:Chotolok10@myfirstcluster-bsyfh.mongodb.net/cookbook?retryWrites=true&w=majority'","","mongo = PyMongo(app)","","","@app.route('/')","@app.route('/home')","def home():","    return render_template('home.html', title='Home', recipes=mongo.db.recipes.find().sort('likes', pymongo.DESCENDING).limit(4))","    ","@app.route('/get_recipes', methods=['GET'])","def get_recipes():","    return render_template('recipes.html', title='All Recipes', recipes=mongo.db.recipes.find())","    #db.companies.find().skip(NUMBER_OF_ITEMS * (PAGE_NUMBER - 1)).limit(NUMBER_OF_ITEMS )","    #return render_template('recipes.html', title='All Recipes', recipes=mongo.db.recipes.find().skip(4 *  (1 - 1)).limit(6))","","    ","","@app.route('/get_starter', methods=['GET'])","def get_starter():","    return render_template('recipes.html', title='Starters', recipes=mongo.db.recipes.find({'recipe_category': 'Starter'}))","","@app.route('/get_main', methods=['GET'])","def get_main():","    return render_template('recipes.html', title='Main Dish', recipes=mongo.db.recipes.find({'recipe_category': 'Main'}))","","@app.route('/get_snacks', methods=['GET'])","def get_snacks():","    return render_template('recipes.html', title='Snacks', recipes=mongo.db.recipes.find({'recipe_category': 'Snacks'}))","","@app.route('/get_desserts', methods=['GET'])","def get_desserts():","    return render_template('recipes.html', title='Desserts', recipes=mongo.db.recipes.find({'recipe_category': 'Dessert'}))"," ","@app.route('/get_helper')","def get_helper():","    return render_template('helper.html', title='Measurement-helper') "," ","    ","@app.route('/get_drinks', methods=['GET'])","def get_drinks():","    return render_template('recipes.html', title='Desserts', recipes=mongo.db.recipes.find({'recipe_category': 'Drinks'}))    ","","@app.route('/view/recipe_id?=<id>')","def view(id):","    ","    recipe = mongo.db.recipes.find_one({\"_id\": ObjectId(id)})","    return render_template('view.html', title='View Full Recipe', recipe=recipe)","","    ","@app.route('/add_recipe')","def add_recipe():","    ","    #check for logged in user","    email = session.get('email')","    if not email:","        flash('You need to login to add your recipe!')","        return redirect(url_for('login'))","    return render_template('addrecipe.html',","    categories=mongo.db.categories.find(),","    difficulties=mongo.db.difficulties.find())","    ","@app.route('/insert_recipe', methods=['POST'])","def insert_recipe():","   print(request.form)","   print(request.form.getlist('recipe_ingredients[]'))","   print(request.form.getlist('recipe_procedure[]'))","   print(request.form.to_dict())","   recipe = mongo.db.recipes","   data = request.form.to_dict()","   data.update({'recipe_ingredients':request.form.getlist('recipe_ingredients[]')})","   data.update({'recipe_procedure':request.form.getlist('recipe_procedure[]')})","   del data['recipe_ingredients[]']","   del data['recipe_procedure[]']","   recipe.insert_one(data)","   flash('You have added your recipe successfully!!')","   return redirect(url_for('get_recipes'))"," "," ","@app.route('/edit_recipe/recipe_id?=<id>',methods=['GET'])","def edit_recipe(id):","    #check for logged in user","    email = session.get('email')","    if not email:","        return redirect(url_for('login'))","","    recipe = mongo.db.recipes.find_one({\"_id\": ObjectId(id)}) ","    categories=mongo.db.categories.find()","    difficulties=mongo.db.difficulties.find()","    return render_template('editrecipe.html', title='Edit Recipe', recipe=recipe, categories=categories, difficulties=difficulties)","","","@app.route('/update_recipe/recipe_id?=<id>', methods=['POST'])","def update_recipe(id):","    recipe = mongo.db.recipes","    recipe.update( {'_id': ObjectId(id)},","        {","        'recipe_name':request.form.get('recipe_name'),","        'recipe_description':request.form.get('recipe_description'),","        'recipe_ingredients':request.form.getlist('recipe_ingredients[]'),","        'recipe_procedure':request.form.getlist('recipe_procedure[]'),","        'recipe_category':request.form.get('recipe_category'),","        'recipe_time':request.form.get('recipe_time'),","        'recipe_difficulty_level':request.form.get('recipe_difficulty_level'),","        'recipe_author':request.form.get('recipe_author'),","        'recipe_image':request.form.get('recipe_image')","    })","    ","    return redirect(url_for('view', id=id))"," ","@app.route('/delete_recipe/recipe_id?=<id>')","def delete_recipe(id):","    ","        # check for logged in user","    name = session.get('name')","    nameid = mongo.db.users.find({'username': name})","    if not name:","        flash('You need to login to delete your own recipe!')","        return redirect(url_for('login'))","    try:","        flash('Your recipe has been deleted!')","        mongo.db.recipes.delete_one({\"_id\": ObjectId(id), 'recipe_author': name})","    except:","        flash('You can only delete your own recipe!')","        return redirect(url_for('get_recipes'))","    return redirect(url_for('get_recipes'))","    ","","@app.route('/like/recipe_id?=<id>')","def like(id):","    '''Controls behavior of user-like increment and decrements operator.","    Feature is dependant upon user interaction in the user-interface.'''","","    mongo.db.recipes.find_one_and_update({\"_id\": ObjectId(id)}, {\"$inc\": {\"likes\": 1}})","    return redirect(url_for('get_recipes'))","","","@app.route('/dislike/recipe_id?=<id>')","def dislike(id):","    '''Controls behavior of user-dislike increment and decrements operator.","    Feature is dependant upon user interaction in the user-interface.'''","    ","    mongo.db.recipes.find_one_and_update({\"_id\": ObjectId(id)}, {\"$inc\": {\"dislikes\": 1}})","    return redirect(url_for('get_recipes'))","    ","","","    ","    ","    ","","@app.route('/register', methods=['POST', 'GET'])","def register():","    '''Accepts POST and GET requests.","    If the request is a GET request, checks for a session email.","    If session email is found, the homepage is rendered.","    If no session email is found, the register template is rendered.","    If the request is a POST request, form data is retrieved.","    A check is performed to verify that the user email doesn't already exist.","    If the user already exists, the register page is rendered with a user_exists error.","    If a user does not exist, the user is added to the database and the login page is rendered.'''","","    # check for logged in user","    email = session.get('email')","    if email:","      return redirect(url_for('home'))","","    user = None","    if request.method == 'POST':","        name = request.form['name']","        email = request.form['email']","        password = request.form['password']","        user = {'name': name, 'email': email, 'password': password}","        flash('Congratulation!!You are registered now!')","        if mongo.db.users.find_one({\"email\": email}):","            return render_template('register.html', title='Register', error=\"user_exists\")","        else:","            mongo.db.users.insert_one(user)","            return render_template('login.html', title='Login', user=user, password=password)","          ","    return render_template('register.html', title='Register')","","","@app.route('/login', methods=['POST', 'GET'])","def login():","    # check for logged in user","    email = session.get('email')","    print(session.get('email'))","    if email:","        return redirect(url_for('register'))","","    user = None","    if request.method == 'POST':","        email = request.form[\"email\"]","        print(session.get('email'))","        user = mongo.db.users.find_one({\"email\": email})","        session['name'] = user['name']","        try:","            assert(user[\"password\"] == request.form[\"password\"])","        except (AssertionError, TypeError):","            return render_template('login.html', title='Login', user=None, error=\"incorrect_login\")","        else:","            try:","                session['name'] = user['name']","            except KeyError:","                session['name'] = 'John Doe'","            session['email'] = email","            print(session.get('email'))","            return redirect(url_for(\"home\"))","","    return render_template('login.html', title='Login', user=user)","","    ","    ","@app.route('/logout')","def logout():","    print(\"I was here\")","    #  logout user and clear session","    session['email'] = None","    session['name'] = None","    # session.clear()","    return redirect(url_for('home'))","","","","if __name__=='__main__':","    app.run(host=os.environ.get('IP'),","    port=int(os.environ.get('PORT')),","    debug=True)"],"id":2621}],[{"start":{"row":0,"column":0},"end":{"row":241,"column":15},"action":"insert","lines":["# importing modules","import os","import math","from flask import Flask, render_template, redirect, request, url_for, session, flash","from flask_pymongo import PyMongo, pymongo","from bson.objectid import ObjectId","","# declaring app name","app = Flask(__name__)","","app.config[\"SECRET_KEY\"] = '7473f88e01ba1bf3f40ce59c38d644ff'","","app.config[\"MONGO_DBNAME\"] = 'cookbook'","app.config[\"MONGO_URI\"] = 'mongodb+srv://debapriya9b:Chotolok10@myfirstcluster-bsyfh.mongodb.net/cookbook?retryWrites=true&w=majority'","","mongo = PyMongo(app)","","","@app.route('/')","@app.route('/home')","def home():","    return render_template('home.html', title='Home', recipes=mongo.db.recipes.find().sort('likes', pymongo.DESCENDING).limit(4))","    ","@app.route('/get_recipes', methods=['GET'])","def get_recipes():","    return render_template('recipes.html', title='All Recipes', recipes=mongo.db.recipes.find())","    #db.companies.find().skip(NUMBER_OF_ITEMS * (PAGE_NUMBER - 1)).limit(NUMBER_OF_ITEMS )","    #return render_template('recipes.html', title='All Recipes', recipes=mongo.db.recipes.find().skip(4 *  (1 - 1)).limit(6))","","    ","","@app.route('/get_starter', methods=['GET'])","def get_starter():","    return render_template('recipes.html', title='Starters', recipes=mongo.db.recipes.find({'recipe_category': 'Starter'}))","","@app.route('/get_main', methods=['GET'])","def get_main():","    return render_template('recipes.html', title='Main Dish', recipes=mongo.db.recipes.find({'recipe_category': 'Main'}))","","@app.route('/get_snacks', methods=['GET'])","def get_snacks():","    return render_template('recipes.html', title='Snacks', recipes=mongo.db.recipes.find({'recipe_category': 'Snacks'}))","","@app.route('/get_desserts', methods=['GET'])","def get_desserts():","    return render_template('recipes.html', title='Desserts', recipes=mongo.db.recipes.find({'recipe_category': 'Dessert'}))"," ","@app.route('/get_helper')","def get_helper():","    return render_template('helper.html', title='Measurement-helper') "," ","    ","@app.route('/get_drinks', methods=['GET'])","def get_drinks():","    return render_template('recipes.html', title='Desserts', recipes=mongo.db.recipes.find({'recipe_category': 'Drinks'}))    ","","@app.route('/view/recipe_id?=<id>')","def view(id):","    ","    recipe = mongo.db.recipes.find_one({\"_id\": ObjectId(id)})","    return render_template('view.html', title='View Full Recipe', recipe=recipe)","","    ","@app.route('/add_recipe')","def add_recipe():","    ","    #check for logged in user","    email = session.get('email')","    if not email:","        flash('You need to login to add your recipe!')","        return redirect(url_for('login'))","    return render_template('addrecipe.html',","    categories=mongo.db.categories.find(),","    difficulties=mongo.db.difficulties.find())","    ","@app.route('/insert_recipe', methods=['POST'])","def insert_recipe():","   print(request.form)","   print(request.form.getlist('recipe_ingredients[]'))","   print(request.form.getlist('recipe_procedure[]'))","   print(request.form.to_dict())","   recipes = mongo.db.recipes","   data = request.form.to_dict()","   data.update({'recipe_ingredients':request.form.getlist('recipe_ingredients[]')})","   data.update({'recipe_procedure':request.form.getlist('recipe_procedure[]')})","   del data['recipe_ingredients[]']","   del data['recipe_procedure[]']","   recipes.insert_one(data)","   flash('You have added your recipe successfully!!')","   return redirect(url_for('get_recipes'))"," "," ","@app.route('/edit_recipe/recipe_id?=<id>',methods=['GET'])","def edit_recipe(id):","    #check for logged in user","    email = session.get('email')","    if not email:","        return redirect(url_for('login'))","","    recipe = mongo.db.recipes.find_one({\"_id\": ObjectId(id)}) ","    categories=mongo.db.categories.find()","    difficulties=mongo.db.difficulties.find()","    return render_template('editrecipe.html', title='Edit Recipe', recipe=recipe, categories=categories, difficulties=difficulties)","","","@app.route('/update_recipe/recipe_id?=<id>', methods=['POST'])","def update_recipe(id):","    recipe = mongo.db.recipes","    recipe.update( {'_id': ObjectId(id)},","        {","        'recipe_name':request.form.get('recipe_name'),","        'recipe_description':request.form.get('recipe_description'),","        'recipe_ingredients':request.form.getlist('recipe_ingredients[]'),","        'recipe_procedure':request.form.getlist('recipe_procedure[]'),","        'recipe_category':request.form.get('recipe_category'),","        'recipe_time':request.form.get('recipe_time'),","        'recipe_difficulty_level':request.form.get('recipe_difficulty_level'),","        'recipe_author':request.form.get('recipe_author'),","        'recipe_image':request.form.get('recipe_image')","    })","    ","    return redirect(url_for('view', id=id))"," ","@app.route('/delete_recipe/recipe_id?=<id>')","def delete_recipe(id):","    ","        # check for logged in user","    name = session.get('name')","    nameid = mongo.db.users.find({'username': name})","    if not name:","        flash('You need to login to delete your own recipe!')","        return redirect(url_for('login'))","    try:","        flash('Your recipe has been deleted!')","        mongo.db.recipes.delete_one({\"_id\": ObjectId(id), 'recipe_author': name})","    except:","        flash('You can only delete your own recipe!')","        return redirect(url_for('get_recipes'))","    return redirect(url_for('get_recipes'))","    ","","@app.route('/like/recipe_id?=<id>')","def like(id):","    '''Controls behavior of user-like increment and decrements operator.","    Feature is dependant upon user interaction in the user-interface.'''","","    mongo.db.recipes.find_one_and_update({\"_id\": ObjectId(id)}, {\"$inc\": {\"likes\": 1}})","    return redirect(url_for('get_recipes'))","","","@app.route('/dislike/recipe_id?=<id>')","def dislike(id):","    '''Controls behavior of user-dislike increment and decrements operator.","    Feature is dependant upon user interaction in the user-interface.'''","    ","    mongo.db.recipes.find_one_and_update({\"_id\": ObjectId(id)}, {\"$inc\": {\"dislikes\": 1}})","    return redirect(url_for('get_recipes'))","    ","","","    ","    ","    ","","@app.route('/register', methods=['POST', 'GET'])","def register():","    '''Accepts POST and GET requests.","    If the request is a GET request, checks for a session email.","    If session email is found, the homepage is rendered.","    If no session email is found, the register template is rendered.","    If the request is a POST request, form data is retrieved.","    A check is performed to verify that the user email doesn't already exist.","    If the user already exists, the register page is rendered with a user_exists error.","    If a user does not exist, the user is added to the database and the login page is rendered.'''","","    # check for logged in user","    email = session.get('email')","    if email:","      return redirect(url_for('home'))","","    user = None","    if request.method == 'POST':","        name = request.form['name']","        email = request.form['email']","        password = request.form['password']","        user = {'name': name, 'email': email, 'password': password}","        flash('Congratulation!!You are registered now!')","        if mongo.db.users.find_one({\"email\": email}):","            return render_template('register.html', title='Register', error=\"user_exists\")","        else:","            mongo.db.users.insert_one(user)","            return render_template('login.html', title='Login', user=user, password=password)","          ","    return render_template('register.html', title='Register')","","","@app.route('/login', methods=['POST', 'GET'])","def login():","    # check for logged in user","    email = session.get('email')","    print(session.get('email'))","    if email:","        return redirect(url_for('register'))","","    user = None","    if request.method == 'POST':","        email = request.form[\"email\"]","        print(session.get('email'))","        user = mongo.db.users.find_one({\"email\": email})","        session['name'] = user['name']","        try:","            assert(user[\"password\"] == request.form[\"password\"])","        except (AssertionError, TypeError):","            return render_template('login.html', title='Login', user=None, error=\"incorrect_login\")","        else:","            try:","                session['name'] = user['name']","            except KeyError:","                session['name'] = 'John Doe'","            session['email'] = email","            print(session.get('email'))","            return redirect(url_for(\"home\"))","","    return render_template('login.html', title='Login', user=user)","","    ","    ","@app.route('/logout')","def logout():","    print(\"I was here\")","    #  logout user and clear session","    session['email'] = None","    session['name'] = None","    # session.clear()","    return redirect(url_for('home'))","","","","if __name__=='__main__':","    app.run(host=os.environ.get('IP'),","    port=int(os.environ.get('PORT')),","    debug=True)"],"id":2622}],[{"start":{"row":199,"column":8},"end":{"row":199,"column":9},"action":"remove","lines":["l"],"id":2627},{"start":{"row":199,"column":7},"end":{"row":199,"column":8},"action":"remove","lines":["i"]},{"start":{"row":199,"column":6},"end":{"row":199,"column":7},"action":"remove","lines":["a"]},{"start":{"row":199,"column":5},"end":{"row":199,"column":6},"action":"remove","lines":["m"]},{"start":{"row":199,"column":4},"end":{"row":199,"column":5},"action":"remove","lines":["e"]}],[{"start":{"row":199,"column":4},"end":{"row":199,"column":5},"action":"insert","lines":["n"],"id":2628},{"start":{"row":199,"column":5},"end":{"row":199,"column":6},"action":"insert","lines":["a"]},{"start":{"row":199,"column":6},"end":{"row":199,"column":7},"action":"insert","lines":["m"]},{"start":{"row":199,"column":7},"end":{"row":199,"column":8},"action":"insert","lines":["e"]}],[{"start":{"row":199,"column":28},"end":{"row":199,"column":29},"action":"remove","lines":["l"],"id":2629},{"start":{"row":199,"column":27},"end":{"row":199,"column":28},"action":"remove","lines":["i"]},{"start":{"row":199,"column":26},"end":{"row":199,"column":27},"action":"remove","lines":["a"]},{"start":{"row":199,"column":25},"end":{"row":199,"column":26},"action":"remove","lines":["m"]},{"start":{"row":199,"column":24},"end":{"row":199,"column":25},"action":"remove","lines":["e"]}],[{"start":{"row":199,"column":24},"end":{"row":199,"column":25},"action":"insert","lines":["u"],"id":2630},{"start":{"row":199,"column":25},"end":{"row":199,"column":26},"action":"insert","lines":["s"]},{"start":{"row":199,"column":26},"end":{"row":199,"column":27},"action":"insert","lines":["e"]},{"start":{"row":199,"column":27},"end":{"row":199,"column":28},"action":"insert","lines":["r"]},{"start":{"row":199,"column":28},"end":{"row":199,"column":29},"action":"insert","lines":["n"]},{"start":{"row":199,"column":29},"end":{"row":199,"column":30},"action":"insert","lines":["a"]},{"start":{"row":199,"column":30},"end":{"row":199,"column":31},"action":"insert","lines":["m"]},{"start":{"row":199,"column":31},"end":{"row":199,"column":32},"action":"insert","lines":["e"]}],[{"start":{"row":201,"column":11},"end":{"row":201,"column":12},"action":"remove","lines":["l"],"id":2631},{"start":{"row":201,"column":10},"end":{"row":201,"column":11},"action":"remove","lines":["i"]},{"start":{"row":201,"column":9},"end":{"row":201,"column":10},"action":"remove","lines":["a"]},{"start":{"row":201,"column":8},"end":{"row":201,"column":9},"action":"remove","lines":["m"]},{"start":{"row":201,"column":7},"end":{"row":201,"column":8},"action":"remove","lines":["e"]}],[{"start":{"row":201,"column":7},"end":{"row":201,"column":8},"action":"insert","lines":["n"],"id":2632},{"start":{"row":201,"column":8},"end":{"row":201,"column":9},"action":"insert","lines":["a"]},{"start":{"row":201,"column":9},"end":{"row":201,"column":10},"action":"insert","lines":["m"]},{"start":{"row":201,"column":10},"end":{"row":201,"column":11},"action":"insert","lines":["e"]}],[{"start":{"row":200,"column":4},"end":{"row":200,"column":5},"action":"insert","lines":["#"],"id":2633}],[{"start":{"row":207,"column":8},"end":{"row":207,"column":9},"action":"insert","lines":["#"],"id":2634}],[{"start":{"row":206,"column":8},"end":{"row":206,"column":13},"action":"remove","lines":["email"],"id":2635},{"start":{"row":206,"column":8},"end":{"row":206,"column":9},"action":"insert","lines":["n"]},{"start":{"row":206,"column":9},"end":{"row":206,"column":10},"action":"insert","lines":["a"]},{"start":{"row":206,"column":10},"end":{"row":206,"column":11},"action":"insert","lines":["m"]},{"start":{"row":206,"column":11},"end":{"row":206,"column":12},"action":"insert","lines":["e"]}],[{"start":{"row":206,"column":33},"end":{"row":206,"column":34},"action":"remove","lines":["l"],"id":2636},{"start":{"row":206,"column":32},"end":{"row":206,"column":33},"action":"remove","lines":["i"]},{"start":{"row":206,"column":31},"end":{"row":206,"column":32},"action":"remove","lines":["a"]},{"start":{"row":206,"column":30},"end":{"row":206,"column":31},"action":"remove","lines":["m"]},{"start":{"row":206,"column":29},"end":{"row":206,"column":30},"action":"remove","lines":["e"]}],[{"start":{"row":206,"column":29},"end":{"row":206,"column":30},"action":"insert","lines":["u"],"id":2637}],[{"start":{"row":206,"column":30},"end":{"row":206,"column":31},"action":"insert","lines":["s"],"id":2638},{"start":{"row":206,"column":31},"end":{"row":206,"column":32},"action":"insert","lines":["e"]},{"start":{"row":206,"column":32},"end":{"row":206,"column":33},"action":"insert","lines":["n"]},{"start":{"row":206,"column":33},"end":{"row":206,"column":34},"action":"insert","lines":["a"]},{"start":{"row":206,"column":34},"end":{"row":206,"column":35},"action":"insert","lines":["m"]},{"start":{"row":206,"column":35},"end":{"row":206,"column":36},"action":"insert","lines":["e"]}],[{"start":{"row":208,"column":41},"end":{"row":208,"column":46},"action":"remove","lines":["email"],"id":2639},{"start":{"row":208,"column":41},"end":{"row":208,"column":48},"action":"insert","lines":["usename"]}],[{"start":{"row":208,"column":51},"end":{"row":208,"column":56},"action":"remove","lines":["email"],"id":2640},{"start":{"row":208,"column":51},"end":{"row":208,"column":52},"action":"insert","lines":["n"]},{"start":{"row":208,"column":52},"end":{"row":208,"column":53},"action":"insert","lines":["a"]},{"start":{"row":208,"column":53},"end":{"row":208,"column":54},"action":"insert","lines":["m"]},{"start":{"row":208,"column":54},"end":{"row":208,"column":55},"action":"insert","lines":["e"]}],[{"start":{"row":219,"column":25},"end":{"row":219,"column":26},"action":"remove","lines":["l"],"id":2641},{"start":{"row":219,"column":24},"end":{"row":219,"column":25},"action":"remove","lines":["i"]},{"start":{"row":219,"column":23},"end":{"row":219,"column":24},"action":"remove","lines":["a"]},{"start":{"row":219,"column":22},"end":{"row":219,"column":23},"action":"remove","lines":["m"]},{"start":{"row":219,"column":21},"end":{"row":219,"column":22},"action":"remove","lines":["e"]}],[{"start":{"row":219,"column":21},"end":{"row":219,"column":22},"action":"insert","lines":["n"],"id":2642},{"start":{"row":219,"column":22},"end":{"row":219,"column":23},"action":"insert","lines":["a"]},{"start":{"row":219,"column":23},"end":{"row":219,"column":24},"action":"insert","lines":["m"]},{"start":{"row":219,"column":24},"end":{"row":219,"column":25},"action":"insert","lines":["e"]}],[{"start":{"row":219,"column":34},"end":{"row":219,"column":35},"action":"remove","lines":["l"],"id":2643},{"start":{"row":219,"column":33},"end":{"row":219,"column":34},"action":"remove","lines":["i"]},{"start":{"row":219,"column":32},"end":{"row":219,"column":33},"action":"remove","lines":["a"]},{"start":{"row":219,"column":31},"end":{"row":219,"column":32},"action":"remove","lines":["m"]},{"start":{"row":219,"column":30},"end":{"row":219,"column":31},"action":"remove","lines":["e"]}],[{"start":{"row":219,"column":30},"end":{"row":219,"column":31},"action":"insert","lines":["n"],"id":2644}],[{"start":{"row":219,"column":30},"end":{"row":219,"column":31},"action":"remove","lines":["n"],"id":2645}],[{"start":{"row":219,"column":30},"end":{"row":219,"column":31},"action":"insert","lines":["n"],"id":2646},{"start":{"row":219,"column":31},"end":{"row":219,"column":32},"action":"insert","lines":["a"]},{"start":{"row":219,"column":32},"end":{"row":219,"column":33},"action":"insert","lines":["m"]},{"start":{"row":219,"column":33},"end":{"row":219,"column":34},"action":"insert","lines":["e"]}],[{"start":{"row":219,"column":33},"end":{"row":219,"column":34},"action":"remove","lines":["e"],"id":2647},{"start":{"row":219,"column":32},"end":{"row":219,"column":33},"action":"remove","lines":["m"]},{"start":{"row":219,"column":31},"end":{"row":219,"column":32},"action":"remove","lines":["a"]},{"start":{"row":219,"column":30},"end":{"row":219,"column":31},"action":"remove","lines":["n"]}],[{"start":{"row":219,"column":30},"end":{"row":219,"column":31},"action":"insert","lines":["u"],"id":2648},{"start":{"row":219,"column":31},"end":{"row":219,"column":32},"action":"insert","lines":["s"]},{"start":{"row":219,"column":32},"end":{"row":219,"column":33},"action":"insert","lines":["e"]},{"start":{"row":219,"column":33},"end":{"row":219,"column":34},"action":"insert","lines":["r"]},{"start":{"row":219,"column":34},"end":{"row":219,"column":35},"action":"insert","lines":["n"]}],[{"start":{"row":219,"column":35},"end":{"row":219,"column":36},"action":"insert","lines":["a"],"id":2649},{"start":{"row":219,"column":36},"end":{"row":219,"column":37},"action":"insert","lines":["m"]},{"start":{"row":219,"column":37},"end":{"row":219,"column":38},"action":"insert","lines":["e"]}],[{"start":{"row":196,"column":0},"end":{"row":223,"column":66},"action":"remove","lines":["@app.route('/login', methods=['POST', 'GET'])","def login():","    # check for logged in user","    name = session.get('username')","    #print(session.get('email'))","    if name:","        return redirect(url_for('register'))","","    user = None","    if request.method == 'POST':","        name = request.form[\"usename\"]","        #print(session.get('email'))","        user = mongo.db.users.find_one({\"usename\": name})","        session['name'] = user['name']","        try:","            assert(user[\"password\"] == request.form[\"password\"])","        except (AssertionError, TypeError):","            return render_template('login.html', title='Login', user=None, error=\"incorrect_login\")","        else:","            try:","                session['name'] = user['name']","            except KeyError:","                session['name'] = 'John Doe'","            session['name'] = username","            print(session.get('email'))","            return redirect(url_for(\"home\"))","","    return render_template('login.html', title='Login', user=user)"],"id":2650},{"start":{"row":196,"column":0},"end":{"row":223,"column":66},"action":"insert","lines":["@app.route('/login', methods=['POST', 'GET'])","def login():","    # check for logged in user","    email = session.get('email')","    print(session.get('email'))","    if email:","        return redirect(url_for('register'))","","    user = None","    if request.method == 'POST':","        email = request.form[\"email\"]","        print(session.get('email'))","        user = mongo.db.users.find_one({\"email\": email})","        session['name'] = user['name']","        try:","            assert(user[\"password\"] == request.form[\"password\"])","        except (AssertionError, TypeError):","            return render_template('login.html', title='Login', user=None, error=\"incorrect_login\")","        else:","            try:","                session['name'] = user['name']","            except KeyError:","                session['name'] = 'John Doe'","            session['email'] = email","            print(session.get('email'))","            return redirect(url_for(\"home\"))","","    return render_template('login.html', title='Login', user=user)"]}],[{"start":{"row":199,"column":4},"end":{"row":199,"column":9},"action":"remove","lines":["email"],"id":2651},{"start":{"row":199,"column":4},"end":{"row":199,"column":5},"action":"insert","lines":["n"]},{"start":{"row":199,"column":5},"end":{"row":199,"column":6},"action":"insert","lines":["a"]},{"start":{"row":199,"column":6},"end":{"row":199,"column":7},"action":"insert","lines":["m"]},{"start":{"row":199,"column":7},"end":{"row":199,"column":8},"action":"insert","lines":["e"]}],[{"start":{"row":199,"column":24},"end":{"row":199,"column":29},"action":"remove","lines":["email"],"id":2652},{"start":{"row":199,"column":24},"end":{"row":199,"column":25},"action":"insert","lines":["n"]},{"start":{"row":199,"column":25},"end":{"row":199,"column":26},"action":"insert","lines":["a"]},{"start":{"row":199,"column":26},"end":{"row":199,"column":27},"action":"insert","lines":["m"]},{"start":{"row":199,"column":27},"end":{"row":199,"column":28},"action":"insert","lines":["e"]}],[{"start":{"row":201,"column":7},"end":{"row":201,"column":12},"action":"remove","lines":["email"],"id":2653},{"start":{"row":201,"column":7},"end":{"row":201,"column":8},"action":"insert","lines":["n"]},{"start":{"row":201,"column":8},"end":{"row":201,"column":9},"action":"insert","lines":["a"]},{"start":{"row":201,"column":9},"end":{"row":201,"column":10},"action":"insert","lines":["m"]},{"start":{"row":201,"column":10},"end":{"row":201,"column":11},"action":"insert","lines":["e"]}],[{"start":{"row":206,"column":12},"end":{"row":206,"column":13},"action":"remove","lines":["l"],"id":2655},{"start":{"row":206,"column":11},"end":{"row":206,"column":12},"action":"remove","lines":["i"]},{"start":{"row":206,"column":10},"end":{"row":206,"column":11},"action":"remove","lines":["a"]},{"start":{"row":206,"column":9},"end":{"row":206,"column":10},"action":"remove","lines":["m"]},{"start":{"row":206,"column":8},"end":{"row":206,"column":9},"action":"remove","lines":["e"]}],[{"start":{"row":206,"column":8},"end":{"row":206,"column":9},"action":"insert","lines":["n"],"id":2656},{"start":{"row":206,"column":9},"end":{"row":206,"column":10},"action":"insert","lines":["a"]},{"start":{"row":206,"column":10},"end":{"row":206,"column":11},"action":"insert","lines":["m"]},{"start":{"row":206,"column":11},"end":{"row":206,"column":12},"action":"insert","lines":["e"]}],[{"start":{"row":206,"column":33},"end":{"row":206,"column":34},"action":"remove","lines":["l"],"id":2657},{"start":{"row":206,"column":32},"end":{"row":206,"column":33},"action":"remove","lines":["i"]},{"start":{"row":206,"column":31},"end":{"row":206,"column":32},"action":"remove","lines":["a"]},{"start":{"row":206,"column":30},"end":{"row":206,"column":31},"action":"remove","lines":["m"]},{"start":{"row":206,"column":29},"end":{"row":206,"column":30},"action":"remove","lines":["e"]}],[{"start":{"row":206,"column":29},"end":{"row":206,"column":30},"action":"insert","lines":["n"],"id":2658},{"start":{"row":206,"column":30},"end":{"row":206,"column":31},"action":"insert","lines":["a"]},{"start":{"row":206,"column":31},"end":{"row":206,"column":32},"action":"insert","lines":["m"]},{"start":{"row":206,"column":32},"end":{"row":206,"column":33},"action":"insert","lines":["e"]}],[{"start":{"row":208,"column":45},"end":{"row":208,"column":46},"action":"remove","lines":["l"],"id":2659},{"start":{"row":208,"column":44},"end":{"row":208,"column":45},"action":"remove","lines":["i"]},{"start":{"row":208,"column":43},"end":{"row":208,"column":44},"action":"remove","lines":["a"]},{"start":{"row":208,"column":42},"end":{"row":208,"column":43},"action":"remove","lines":["m"]},{"start":{"row":208,"column":41},"end":{"row":208,"column":42},"action":"remove","lines":["e"]}],[{"start":{"row":208,"column":41},"end":{"row":208,"column":42},"action":"insert","lines":["u"],"id":2660},{"start":{"row":208,"column":42},"end":{"row":208,"column":43},"action":"insert","lines":["s"]},{"start":{"row":208,"column":43},"end":{"row":208,"column":44},"action":"insert","lines":["r"]},{"start":{"row":208,"column":44},"end":{"row":208,"column":45},"action":"insert","lines":["n"]},{"start":{"row":208,"column":45},"end":{"row":208,"column":46},"action":"insert","lines":["a"]},{"start":{"row":208,"column":46},"end":{"row":208,"column":47},"action":"insert","lines":["m"]},{"start":{"row":208,"column":47},"end":{"row":208,"column":48},"action":"insert","lines":["e"]}],[{"start":{"row":208,"column":55},"end":{"row":208,"column":56},"action":"remove","lines":["l"],"id":2661},{"start":{"row":208,"column":54},"end":{"row":208,"column":55},"action":"remove","lines":["i"]},{"start":{"row":208,"column":53},"end":{"row":208,"column":54},"action":"remove","lines":["a"]},{"start":{"row":208,"column":52},"end":{"row":208,"column":53},"action":"remove","lines":["m"]},{"start":{"row":208,"column":51},"end":{"row":208,"column":52},"action":"remove","lines":["e"]}],[{"start":{"row":208,"column":51},"end":{"row":208,"column":52},"action":"insert","lines":["n"],"id":2662},{"start":{"row":208,"column":52},"end":{"row":208,"column":53},"action":"insert","lines":["a"]},{"start":{"row":208,"column":53},"end":{"row":208,"column":54},"action":"insert","lines":["m"]},{"start":{"row":208,"column":54},"end":{"row":208,"column":55},"action":"insert","lines":["e"]}],[{"start":{"row":219,"column":25},"end":{"row":219,"column":26},"action":"remove","lines":["l"],"id":2663},{"start":{"row":219,"column":24},"end":{"row":219,"column":25},"action":"remove","lines":["i"]},{"start":{"row":219,"column":23},"end":{"row":219,"column":24},"action":"remove","lines":["a"]},{"start":{"row":219,"column":22},"end":{"row":219,"column":23},"action":"remove","lines":["m"]},{"start":{"row":219,"column":21},"end":{"row":219,"column":22},"action":"remove","lines":["e"]}],[{"start":{"row":219,"column":21},"end":{"row":219,"column":22},"action":"insert","lines":["n"],"id":2664},{"start":{"row":219,"column":22},"end":{"row":219,"column":23},"action":"insert","lines":["a"]},{"start":{"row":219,"column":23},"end":{"row":219,"column":24},"action":"insert","lines":["m"]},{"start":{"row":219,"column":24},"end":{"row":219,"column":25},"action":"insert","lines":["e"]}],[{"start":{"row":219,"column":34},"end":{"row":219,"column":35},"action":"remove","lines":["l"],"id":2665},{"start":{"row":219,"column":33},"end":{"row":219,"column":34},"action":"remove","lines":["i"]},{"start":{"row":219,"column":32},"end":{"row":219,"column":33},"action":"remove","lines":["a"]},{"start":{"row":219,"column":31},"end":{"row":219,"column":32},"action":"remove","lines":["m"]},{"start":{"row":219,"column":30},"end":{"row":219,"column":31},"action":"remove","lines":["e"]}],[{"start":{"row":219,"column":30},"end":{"row":219,"column":31},"action":"insert","lines":["n"],"id":2666},{"start":{"row":219,"column":31},"end":{"row":219,"column":32},"action":"insert","lines":["a"]},{"start":{"row":219,"column":32},"end":{"row":219,"column":33},"action":"insert","lines":["m"]},{"start":{"row":219,"column":33},"end":{"row":219,"column":34},"action":"insert","lines":["e"]}],[{"start":{"row":206,"column":32},"end":{"row":206,"column":33},"action":"remove","lines":["e"],"id":2667},{"start":{"row":206,"column":31},"end":{"row":206,"column":32},"action":"remove","lines":["m"]},{"start":{"row":206,"column":30},"end":{"row":206,"column":31},"action":"remove","lines":["a"]},{"start":{"row":206,"column":29},"end":{"row":206,"column":30},"action":"remove","lines":["n"]}],[{"start":{"row":206,"column":29},"end":{"row":206,"column":30},"action":"insert","lines":["u"],"id":2668},{"start":{"row":206,"column":30},"end":{"row":206,"column":31},"action":"insert","lines":["s"]},{"start":{"row":206,"column":31},"end":{"row":206,"column":32},"action":"insert","lines":["e"]},{"start":{"row":206,"column":32},"end":{"row":206,"column":33},"action":"insert","lines":["r"]},{"start":{"row":206,"column":33},"end":{"row":206,"column":34},"action":"insert","lines":["n"]}],[{"start":{"row":206,"column":34},"end":{"row":206,"column":35},"action":"insert","lines":["a"],"id":2669},{"start":{"row":206,"column":35},"end":{"row":206,"column":36},"action":"insert","lines":["m"]},{"start":{"row":206,"column":36},"end":{"row":206,"column":37},"action":"insert","lines":["e"]}],[{"start":{"row":206,"column":36},"end":{"row":206,"column":37},"action":"remove","lines":["e"],"id":2670},{"start":{"row":206,"column":35},"end":{"row":206,"column":36},"action":"remove","lines":["m"]},{"start":{"row":206,"column":34},"end":{"row":206,"column":35},"action":"remove","lines":["a"]},{"start":{"row":206,"column":33},"end":{"row":206,"column":34},"action":"remove","lines":["n"]},{"start":{"row":206,"column":32},"end":{"row":206,"column":33},"action":"remove","lines":["r"]},{"start":{"row":206,"column":31},"end":{"row":206,"column":32},"action":"remove","lines":["e"]},{"start":{"row":206,"column":30},"end":{"row":206,"column":31},"action":"remove","lines":["s"]}],[{"start":{"row":206,"column":30},"end":{"row":206,"column":31},"action":"insert","lines":["s"],"id":2671},{"start":{"row":206,"column":31},"end":{"row":206,"column":32},"action":"insert","lines":["e"]},{"start":{"row":206,"column":32},"end":{"row":206,"column":33},"action":"insert","lines":["r"]}],[{"start":{"row":208,"column":43},"end":{"row":208,"column":44},"action":"remove","lines":["r"],"id":2672}],[{"start":{"row":208,"column":43},"end":{"row":208,"column":44},"action":"insert","lines":["e"],"id":2673},{"start":{"row":208,"column":44},"end":{"row":208,"column":45},"action":"insert","lines":["r"]}],[{"start":{"row":206,"column":32},"end":{"row":206,"column":33},"action":"remove","lines":["r"],"id":2674},{"start":{"row":206,"column":31},"end":{"row":206,"column":32},"action":"remove","lines":["e"]},{"start":{"row":206,"column":30},"end":{"row":206,"column":31},"action":"remove","lines":["s"]},{"start":{"row":206,"column":29},"end":{"row":206,"column":30},"action":"remove","lines":["u"]}],[{"start":{"row":206,"column":29},"end":{"row":206,"column":30},"action":"insert","lines":["n"],"id":2675},{"start":{"row":206,"column":30},"end":{"row":206,"column":31},"action":"insert","lines":["a"]},{"start":{"row":206,"column":31},"end":{"row":206,"column":32},"action":"insert","lines":["m"]},{"start":{"row":206,"column":32},"end":{"row":206,"column":33},"action":"insert","lines":["e"]}],[{"start":{"row":200,"column":4},"end":{"row":200,"column":31},"action":"remove","lines":["print(session.get('email'))"],"id":2676},{"start":{"row":200,"column":4},"end":{"row":201,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":200,"column":0},"end":{"row":200,"column":4},"action":"remove","lines":["    "],"id":2677}],[{"start":{"row":206,"column":8},"end":{"row":206,"column":35},"action":"remove","lines":["print(session.get('email'))"],"id":2678}],[{"start":{"row":206,"column":4},"end":{"row":206,"column":8},"action":"remove","lines":["    "],"id":2679},{"start":{"row":206,"column":0},"end":{"row":206,"column":4},"action":"remove","lines":["    "]},{"start":{"row":205,"column":35},"end":{"row":206,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":218,"column":0},"end":{"row":218,"column":39},"action":"remove","lines":["            print(session.get('email'))"],"id":2680}],[{"start":{"row":217,"column":34},"end":{"row":218,"column":0},"action":"remove","lines":["",""],"id":2681}],[{"start":{"row":163,"column":0},"end":{"row":220,"column":66},"action":"remove","lines":["","@app.route('/register', methods=['POST', 'GET'])","def register():","    '''Accepts POST and GET requests.","    If the request is a GET request, checks for a session email.","    If session email is found, the homepage is rendered.","    If no session email is found, the register template is rendered.","    If the request is a POST request, form data is retrieved.","    A check is performed to verify that the user email doesn't already exist.","    If the user already exists, the register page is rendered with a user_exists error.","    If a user does not exist, the user is added to the database and the login page is rendered.'''","","    # check for logged in user","    email = session.get('email')","    if email:","      return redirect(url_for('home'))","","    user = None","    if request.method == 'POST':","        name = request.form['name']","        email = request.form['email']","        password = request.form['password']","        user = {'name': name, 'email': email, 'password': password}","        flash('Congratulation!!You are registered now!')","        if mongo.db.users.find_one({\"email\": email}):","            return render_template('register.html', title='Register', error=\"user_exists\")","        else:","            mongo.db.users.insert_one(user)","            return render_template('login.html', title='Login', user=user, password=password)","          ","    return render_template('register.html', title='Register')","","","@app.route('/login', methods=['POST', 'GET'])","def login():","    # check for logged in user","    name = session.get('name')","    if name:","        return redirect(url_for('register'))","","    user = None","    if request.method == 'POST':","        name = request.form[\"name\"]","        user = mongo.db.users.find_one({\"username\": name})","        session['name'] = user['name']","        try:","            assert(user[\"password\"] == request.form[\"password\"])","        except (AssertionError, TypeError):","            return render_template('login.html', title='Login', user=None, error=\"incorrect_login\")","        else:","            try:","                session['name'] = user['name']","            except KeyError:","                session['name'] = 'John Doe'","            session['name'] = name","            return redirect(url_for(\"home\"))","","    return render_template('login.html', title='Login', user=user)"],"id":2682},{"start":{"row":163,"column":0},"end":{"row":222,"column":66},"action":"insert","lines":["@app.route('/register', methods=['POST', 'GET'])","def register():","    '''Accepts POST and GET requests.","    If the request is a GET request, checks for a session email.","    If session email is found, the homepage is rendered.","    If no session email is found, the register template is rendered.","    If the request is a POST request, form data is retrieved.","    A check is performed to verify that the user email doesn't already exist.","    If the user already exists, the register page is rendered with a user_exists error.","    If a user does not exist, the user is added to the database and the login page is rendered.'''","","    # check for logged in user","    email = session.get('email')","    if email:","      return redirect(url_for('home'))","","    user = None","    if request.method == 'POST':","        name = request.form['name']","        email = request.form['email']","        password = request.form['password']","        user = {'name': name, 'email': email, 'password': password}","        flash('Congratulation!!You are registered now!')","        if mongo.db.users.find_one({\"email\": email}):","            return render_template('register.html', title='Register', error=\"user_exists\")","        else:","            mongo.db.users.insert_one(user)","            return render_template('login.html', title='Login', user=user, password=password)","          ","    return render_template('register.html', title='Register')","","","@app.route('/login', methods=['POST', 'GET'])","def login():","    # check for logged in user","    email = session.get('email')","    print(session.get('email'))","    if email:","        return redirect(url_for('register'))","","    user = None","    if request.method == 'POST':","        email = request.form[\"email\"]","        print(session.get('email'))","        user = mongo.db.users.find_one({\"email\": email})","        session['name'] = user['name']","        try:","            assert(user[\"password\"] == request.form[\"password\"])","        except (AssertionError, TypeError):","            return render_template('login.html', title='Login', user=None, error=\"incorrect_login\")","        else:","            try:","                session['name'] = user['name']","            except KeyError:","                session['name'] = 'John Doe'","            session['email'] = email","            print(session.get('email'))","            return redirect(url_for(\"home\"))","","    return render_template('login.html', title='Login', user=user)"]}],[{"start":{"row":205,"column":12},"end":{"row":205,"column":13},"action":"remove","lines":["l"],"id":2683},{"start":{"row":205,"column":11},"end":{"row":205,"column":12},"action":"remove","lines":["i"]},{"start":{"row":205,"column":10},"end":{"row":205,"column":11},"action":"remove","lines":["a"]},{"start":{"row":205,"column":9},"end":{"row":205,"column":10},"action":"remove","lines":["m"]},{"start":{"row":205,"column":8},"end":{"row":205,"column":9},"action":"remove","lines":["e"]}],[{"start":{"row":205,"column":8},"end":{"row":205,"column":9},"action":"insert","lines":["n"],"id":2684},{"start":{"row":205,"column":9},"end":{"row":205,"column":10},"action":"insert","lines":["a"]},{"start":{"row":205,"column":10},"end":{"row":205,"column":11},"action":"insert","lines":["m"]},{"start":{"row":205,"column":11},"end":{"row":205,"column":12},"action":"insert","lines":["e"]}],[{"start":{"row":205,"column":29},"end":{"row":205,"column":34},"action":"remove","lines":["email"],"id":2685},{"start":{"row":205,"column":29},"end":{"row":205,"column":30},"action":"insert","lines":["n"]},{"start":{"row":205,"column":30},"end":{"row":205,"column":31},"action":"insert","lines":["a"]},{"start":{"row":205,"column":31},"end":{"row":205,"column":32},"action":"insert","lines":["m"]},{"start":{"row":205,"column":32},"end":{"row":205,"column":33},"action":"insert","lines":["e"]}],[{"start":{"row":207,"column":45},"end":{"row":207,"column":46},"action":"remove","lines":["l"],"id":2686},{"start":{"row":207,"column":44},"end":{"row":207,"column":45},"action":"remove","lines":["i"]},{"start":{"row":207,"column":43},"end":{"row":207,"column":44},"action":"remove","lines":["a"]},{"start":{"row":207,"column":42},"end":{"row":207,"column":43},"action":"remove","lines":["m"]},{"start":{"row":207,"column":41},"end":{"row":207,"column":42},"action":"remove","lines":["e"]}],[{"start":{"row":207,"column":41},"end":{"row":207,"column":42},"action":"insert","lines":["u"],"id":2687},{"start":{"row":207,"column":42},"end":{"row":207,"column":43},"action":"insert","lines":["s"]},{"start":{"row":207,"column":43},"end":{"row":207,"column":44},"action":"insert","lines":["e"]},{"start":{"row":207,"column":44},"end":{"row":207,"column":45},"action":"insert","lines":["r"]},{"start":{"row":207,"column":45},"end":{"row":207,"column":46},"action":"insert","lines":["n"]},{"start":{"row":207,"column":46},"end":{"row":207,"column":47},"action":"insert","lines":["a"]}],[{"start":{"row":207,"column":47},"end":{"row":207,"column":48},"action":"insert","lines":["m"],"id":2688},{"start":{"row":207,"column":48},"end":{"row":207,"column":49},"action":"insert","lines":["e"]}],[{"start":{"row":207,"column":52},"end":{"row":207,"column":57},"action":"remove","lines":["email"],"id":2689},{"start":{"row":207,"column":52},"end":{"row":207,"column":53},"action":"insert","lines":["n"]},{"start":{"row":207,"column":53},"end":{"row":207,"column":54},"action":"insert","lines":["a"]},{"start":{"row":207,"column":54},"end":{"row":207,"column":55},"action":"insert","lines":["m"]},{"start":{"row":207,"column":55},"end":{"row":207,"column":56},"action":"insert","lines":["e"]}],[{"start":{"row":0,"column":0},"end":{"row":240,"column":15},"action":"remove","lines":["# importing modules","import os","import math","from flask import Flask, render_template, redirect, request, url_for, session, flash","from flask_pymongo import PyMongo, pymongo","from bson.objectid import ObjectId","","# declaring app name","app = Flask(__name__)","","app.config[\"SECRET_KEY\"] = '7473f88e01ba1bf3f40ce59c38d644ff'","","app.config[\"MONGO_DBNAME\"] = 'cookbook'","app.config[\"MONGO_URI\"] = 'mongodb+srv://debapriya9b:Chotolok10@myfirstcluster-bsyfh.mongodb.net/cookbook?retryWrites=true&w=majority'","","mongo = PyMongo(app)","","","@app.route('/')","@app.route('/home')","def home():","    return render_template('home.html', title='Home', recipes=mongo.db.recipes.find().sort('likes', pymongo.DESCENDING).limit(4))","    ","@app.route('/get_recipes', methods=['GET'])","def get_recipes():","    return render_template('recipes.html', title='All Recipes', recipes=mongo.db.recipes.find())","    #db.companies.find().skip(NUMBER_OF_ITEMS * (PAGE_NUMBER - 1)).limit(NUMBER_OF_ITEMS )","    #return render_template('recipes.html', title='All Recipes', recipes=mongo.db.recipes.find().skip(4 *  (1 - 1)).limit(6))","","    ","","@app.route('/get_starter', methods=['GET'])","def get_starter():","    return render_template('recipes.html', title='Starters', recipes=mongo.db.recipes.find({'recipe_category': 'Starter'}))","","@app.route('/get_main', methods=['GET'])","def get_main():","    return render_template('recipes.html', title='Main Dish', recipes=mongo.db.recipes.find({'recipe_category': 'Main'}))","","@app.route('/get_snacks', methods=['GET'])","def get_snacks():","    return render_template('recipes.html', title='Snacks', recipes=mongo.db.recipes.find({'recipe_category': 'Snacks'}))","","@app.route('/get_desserts', methods=['GET'])","def get_desserts():","    return render_template('recipes.html', title='Desserts', recipes=mongo.db.recipes.find({'recipe_category': 'Dessert'}))"," ","@app.route('/get_helper')","def get_helper():","    return render_template('helper.html', title='Measurement-helper') "," ","    ","@app.route('/get_drinks', methods=['GET'])","def get_drinks():","    return render_template('recipes.html', title='Desserts', recipes=mongo.db.recipes.find({'recipe_category': 'Drinks'}))    ","","@app.route('/view/recipe_id?=<id>')","def view(id):","    ","    recipe = mongo.db.recipes.find_one({\"_id\": ObjectId(id)})","    return render_template('view.html', title='View Full Recipe', recipe=recipe)","","    ","@app.route('/add_recipe')","def add_recipe():","    ","    #check for logged in user","    email = session.get('email')","    if not email:","        flash('You need to login to add your recipe!')","        return redirect(url_for('login'))","    return render_template('addrecipe.html',","    categories=mongo.db.categories.find(),","    difficulties=mongo.db.difficulties.find())","    ","@app.route('/insert_recipe', methods=['POST'])","def insert_recipe():","   print(request.form)","   print(request.form.getlist('recipe_ingredients[]'))","   print(request.form.getlist('recipe_procedure[]'))","   print(request.form.to_dict())","   recipes = mongo.db.recipes","   data = request.form.to_dict()","   data.update({'recipe_ingredients':request.form.getlist('recipe_ingredients[]')})","   data.update({'recipe_procedure':request.form.getlist('recipe_procedure[]')})","   del data['recipe_ingredients[]']","   del data['recipe_procedure[]']","   recipes.insert_one(data)","   flash('You have added your recipe successfully!!')","   return redirect(url_for('get_recipes'))"," "," ","@app.route('/edit_recipe/recipe_id?=<id>',methods=['GET'])","def edit_recipe(id):","    #check for logged in user","    email = session.get('email')","    if not email:","        return redirect(url_for('login'))","","    recipe = mongo.db.recipes.find_one({\"_id\": ObjectId(id)}) ","    categories=mongo.db.categories.find()","    difficulties=mongo.db.difficulties.find()","    return render_template('editrecipe.html', title='Edit Recipe', recipe=recipe, categories=categories, difficulties=difficulties)","","","@app.route('/update_recipe/recipe_id?=<id>', methods=['POST'])","def update_recipe(id):","    recipe = mongo.db.recipes","    recipe.update( {'_id': ObjectId(id)},","        {","        'recipe_name':request.form.get('recipe_name'),","        'recipe_description':request.form.get('recipe_description'),","        'recipe_ingredients':request.form.getlist('recipe_ingredients[]'),","        'recipe_procedure':request.form.getlist('recipe_procedure[]'),","        'recipe_category':request.form.get('recipe_category'),","        'recipe_time':request.form.get('recipe_time'),","        'recipe_difficulty_level':request.form.get('recipe_difficulty_level'),","        'recipe_author':request.form.get('recipe_author'),","        'recipe_image':request.form.get('recipe_image')","    })","    ","    return redirect(url_for('view', id=id))"," ","@app.route('/delete_recipe/recipe_id?=<id>')","def delete_recipe(id):","    ","        # check for logged in user","    name = session.get('name')","    nameid = mongo.db.users.find({'username': name})","    if not name:","        flash('You need to login to delete your own recipe!')","        return redirect(url_for('login'))","    try:","        flash('Your recipe has been deleted!')","        mongo.db.recipes.delete_one({\"_id\": ObjectId(id), 'recipe_author': name})","    except:","        flash('You can only delete your own recipe!')","        return redirect(url_for('get_recipes'))","    return redirect(url_for('get_recipes'))","    ","","@app.route('/like/recipe_id?=<id>')","def like(id):","    '''Controls behavior of user-like increment and decrements operator.","    Feature is dependant upon user interaction in the user-interface.'''","","    mongo.db.recipes.find_one_and_update({\"_id\": ObjectId(id)}, {\"$inc\": {\"likes\": 1}})","    return redirect(url_for('get_recipes'))","","","@app.route('/dislike/recipe_id?=<id>')","def dislike(id):","    '''Controls behavior of user-dislike increment and decrements operator.","    Feature is dependant upon user interaction in the user-interface.'''","    ","    mongo.db.recipes.find_one_and_update({\"_id\": ObjectId(id)}, {\"$inc\": {\"dislikes\": 1}})","    return redirect(url_for('get_recipes'))","    ","","","    ","    ","    ","@app.route('/register', methods=['POST', 'GET'])","def register():","    '''Accepts POST and GET requests.","    If the request is a GET request, checks for a session email.","    If session email is found, the homepage is rendered.","    If no session email is found, the register template is rendered.","    If the request is a POST request, form data is retrieved.","    A check is performed to verify that the user email doesn't already exist.","    If the user already exists, the register page is rendered with a user_exists error.","    If a user does not exist, the user is added to the database and the login page is rendered.'''","","    # check for logged in user","    email = session.get('email')","    if email:","      return redirect(url_for('home'))","","    user = None","    if request.method == 'POST':","        name = request.form['name']","        email = request.form['email']","        password = request.form['password']","        user = {'name': name, 'email': email, 'password': password}","        flash('Congratulation!!You are registered now!')","        if mongo.db.users.find_one({\"email\": email}):","            return render_template('register.html', title='Register', error=\"user_exists\")","        else:","            mongo.db.users.insert_one(user)","            return render_template('login.html', title='Login', user=user, password=password)","          ","    return render_template('register.html', title='Register')","","","@app.route('/login', methods=['POST', 'GET'])","def login():","    # check for logged in user","    email = session.get('email')","    print(session.get('email'))","    if email:","        return redirect(url_for('register'))","","    user = None","    if request.method == 'POST':","        name = request.form[\"name\"]","        print(session.get('email'))","        user = mongo.db.users.find_one({\"username\": name})","        session['name'] = user['name']","        try:","            assert(user[\"password\"] == request.form[\"password\"])","        except (AssertionError, TypeError):","            return render_template('login.html', title='Login', user=None, error=\"incorrect_login\")","        else:","            try:","                session['name'] = user['name']","            except KeyError:","                session['name'] = 'John Doe'","            session['email'] = email","            print(session.get('email'))","            return redirect(url_for(\"home\"))","","    return render_template('login.html', title='Login', user=user)","","    ","    ","@app.route('/logout')","def logout():","    print(\"I was here\")","    #  logout user and clear session","    session['email'] = None","    session['name'] = None","    # session.clear()","    return redirect(url_for('home'))","","","","if __name__=='__main__':","    app.run(host=os.environ.get('IP'),","    port=int(os.environ.get('PORT')),","    debug=True)"],"id":2690}],[{"start":{"row":0,"column":0},"end":{"row":241,"column":15},"action":"insert","lines":["# importing modules","import os","import math","from flask import Flask, render_template, redirect, request, url_for, session, flash","from flask_pymongo import PyMongo, pymongo","from bson.objectid import ObjectId","","# declaring app name","app = Flask(__name__)","","app.config[\"SECRET_KEY\"] = '7473f88e01ba1bf3f40ce59c38d644ff'","","app.config[\"MONGO_DBNAME\"] = 'cookbook'","app.config[\"MONGO_URI\"] = 'mongodb+srv://debapriya9b:Chotolok10@myfirstcluster-bsyfh.mongodb.net/cookbook?retryWrites=true&w=majority'","","mongo = PyMongo(app)","","","@app.route('/')","@app.route('/home')","def home():","    return render_template('home.html', title='Home', recipes=mongo.db.recipes.find().sort('likes', pymongo.DESCENDING).limit(4))","    ","@app.route('/get_recipes', methods=['GET'])","def get_recipes():","    return render_template('recipes.html', title='All Recipes', recipes=mongo.db.recipes.find())","    #db.companies.find().skip(NUMBER_OF_ITEMS * (PAGE_NUMBER - 1)).limit(NUMBER_OF_ITEMS )","    #return render_template('recipes.html', title='All Recipes', recipes=mongo.db.recipes.find().skip(4 *  (1 - 1)).limit(6))","","    ","","@app.route('/get_starter', methods=['GET'])","def get_starter():","    return render_template('recipes.html', title='Starters', recipes=mongo.db.recipes.find({'recipe_category': 'Starter'}))","","@app.route('/get_main', methods=['GET'])","def get_main():","    return render_template('recipes.html', title='Main Dish', recipes=mongo.db.recipes.find({'recipe_category': 'Main'}))","","@app.route('/get_snacks', methods=['GET'])","def get_snacks():","    return render_template('recipes.html', title='Snacks', recipes=mongo.db.recipes.find({'recipe_category': 'Snacks'}))","","@app.route('/get_desserts', methods=['GET'])","def get_desserts():","    return render_template('recipes.html', title='Desserts', recipes=mongo.db.recipes.find({'recipe_category': 'Dessert'}))"," ","@app.route('/get_helper')","def get_helper():","    return render_template('helper.html', title='Measurement-helper') "," ","    ","@app.route('/get_drinks', methods=['GET'])","def get_drinks():","    return render_template('recipes.html', title='Desserts', recipes=mongo.db.recipes.find({'recipe_category': 'Drinks'}))    ","","@app.route('/view/recipe_id?=<id>')","def view(id):","    ","    recipe = mongo.db.recipes.find_one({\"_id\": ObjectId(id)})","    return render_template('view.html', title='View Full Recipe', recipe=recipe)","","    ","@app.route('/add_recipe')","def add_recipe():","    ","    #check for logged in user","    email = session.get('email')","    if not email:","        flash('You need to login to add your recipe!')","        return redirect(url_for('login'))","    return render_template('addrecipe.html',","    categories=mongo.db.categories.find(),","    difficulties=mongo.db.difficulties.find())","    ","@app.route('/insert_recipe', methods=['POST'])","def insert_recipe():","   print(request.form)","   print(request.form.getlist('recipe_ingredients[]'))","   print(request.form.getlist('recipe_procedure[]'))","   print(request.form.to_dict())","   recipes = mongo.db.recipes","   data = request.form.to_dict()","   data.update({'recipe_ingredients':request.form.getlist('recipe_ingredients[]')})","   data.update({'recipe_procedure':request.form.getlist('recipe_procedure[]')})","   del data['recipe_ingredients[]']","   del data['recipe_procedure[]']","   recipes.insert_one(data)","   flash('You have added your recipe successfully!!')","   return redirect(url_for('get_recipes'))"," "," ","@app.route('/edit_recipe/recipe_id?=<id>',methods=['GET'])","def edit_recipe(id):","    #check for logged in user","    email = session.get('email')","    if not email:","        return redirect(url_for('login'))","","    recipe = mongo.db.recipes.find_one({\"_id\": ObjectId(id)}) ","    categories=mongo.db.categories.find()","    difficulties=mongo.db.difficulties.find()","    return render_template('editrecipe.html', title='Edit Recipe', recipe=recipe, categories=categories, difficulties=difficulties)","","","@app.route('/update_recipe/recipe_id?=<id>', methods=['POST'])","def update_recipe(id):","    recipe = mongo.db.recipes","    recipe.update( {'_id': ObjectId(id)},","        {","        'recipe_name':request.form.get('recipe_name'),","        'recipe_description':request.form.get('recipe_description'),","        'recipe_ingredients':request.form.getlist('recipe_ingredients[]'),","        'recipe_procedure':request.form.getlist('recipe_procedure[]'),","        'recipe_category':request.form.get('recipe_category'),","        'recipe_time':request.form.get('recipe_time'),","        'recipe_difficulty_level':request.form.get('recipe_difficulty_level'),","        'recipe_author':request.form.get('recipe_author'),","        'recipe_image':request.form.get('recipe_image')","    })","    ","    return redirect(url_for('view', id=id))"," ","@app.route('/delete_recipe/recipe_id?=<id>')","def delete_recipe(id):","    ","        # check for logged in user","    name = session.get('name')","    nameid = mongo.db.users.find({'username': name})","    if not name:","        flash('You need to login to delete your own recipe!')","        return redirect(url_for('login'))","    try:","        flash('Your recipe has been deleted!')","        mongo.db.recipes.delete_one({\"_id\": ObjectId(id), 'recipe_author': name})","    except:","        flash('You can only delete your own recipe!')","        return redirect(url_for('get_recipes'))","    return redirect(url_for('get_recipes'))","    ","","@app.route('/like/recipe_id?=<id>')","def like(id):","    '''Controls behavior of user-like increment and decrements operator.","    Feature is dependant upon user interaction in the user-interface.'''","","    mongo.db.recipes.find_one_and_update({\"_id\": ObjectId(id)}, {\"$inc\": {\"likes\": 1}})","    return redirect(url_for('get_recipes'))","","","@app.route('/dislike/recipe_id?=<id>')","def dislike(id):","    '''Controls behavior of user-dislike increment and decrements operator.","    Feature is dependant upon user interaction in the user-interface.'''","    ","    mongo.db.recipes.find_one_and_update({\"_id\": ObjectId(id)}, {\"$inc\": {\"dislikes\": 1}})","    return redirect(url_for('get_recipes'))","    ","","","    ","    ","    ","","@app.route('/register', methods=['POST', 'GET'])","def register():","    '''Accepts POST and GET requests.","    If the request is a GET request, checks for a session email.","    If session email is found, the homepage is rendered.","    If no session email is found, the register template is rendered.","    If the request is a POST request, form data is retrieved.","    A check is performed to verify that the user email doesn't already exist.","    If the user already exists, the register page is rendered with a user_exists error.","    If a user does not exist, the user is added to the database and the login page is rendered.'''","","    # check for logged in user","    email = session.get('email')","    if email:","      return redirect(url_for('home'))","","    user = None","    if request.method == 'POST':","        name = request.form['name']","        email = request.form['email']","        password = request.form['password']","        user = {'name': name, 'email': email, 'password': password}","        flash('Congratulation!!You are registered now!')","        if mongo.db.users.find_one({\"email\": email}):","            return render_template('register.html', title='Register', error=\"user_exists\")","        else:","            mongo.db.users.insert_one(user)","            return render_template('login.html', title='Login', user=user, password=password)","          ","    return render_template('register.html', title='Register')","","","@app.route('/login', methods=['POST', 'GET'])","def login():","    # check for logged in user","    email = session.get('email')","    print(session.get('email'))","    if email:","        return redirect(url_for('register'))","","    user = None","    if request.method == 'POST':","        email = request.form[\"email\"]","        print(session.get('email'))","        user = mongo.db.users.find_one({\"email\": email})","        session['name'] = user['name']","        try:","            assert(user[\"password\"] == request.form[\"password\"])","        except (AssertionError, TypeError):","            return render_template('login.html', title='Login', user=None, error=\"incorrect_login\")","        else:","            try:","                session['name'] = user['name']","            except KeyError:","                session['name'] = 'John Doe'","            session['email'] = email","            print(session.get('email'))","            return redirect(url_for(\"home\"))","","    return render_template('login.html', title='Login', user=user)","","    ","    ","@app.route('/logout')","def logout():","    print(\"I was here\")","    #  logout user and clear session","    session['email'] = None","    session['name'] = None","    # session.clear()","    return redirect(url_for('home'))","","","","if __name__=='__main__':","    app.run(host=os.environ.get('IP'),","    port=int(os.environ.get('PORT')),","    debug=True)"],"id":2691}],[{"start":{"row":209,"column":20},"end":{"row":209,"column":21},"action":"remove","lines":["e"],"id":2692},{"start":{"row":209,"column":19},"end":{"row":209,"column":20},"action":"remove","lines":["m"]},{"start":{"row":209,"column":18},"end":{"row":209,"column":19},"action":"remove","lines":["a"]},{"start":{"row":209,"column":17},"end":{"row":209,"column":18},"action":"remove","lines":["n"]}],[{"start":{"row":209,"column":17},"end":{"row":209,"column":18},"action":"insert","lines":["e"],"id":2693},{"start":{"row":209,"column":18},"end":{"row":209,"column":19},"action":"insert","lines":["m"]},{"start":{"row":209,"column":19},"end":{"row":209,"column":20},"action":"insert","lines":["a"]},{"start":{"row":209,"column":20},"end":{"row":209,"column":21},"action":"insert","lines":["i"]},{"start":{"row":209,"column":21},"end":{"row":209,"column":22},"action":"insert","lines":["l"]}],[{"start":{"row":209,"column":33},"end":{"row":209,"column":37},"action":"remove","lines":["name"],"id":2694},{"start":{"row":209,"column":33},"end":{"row":209,"column":34},"action":"insert","lines":["e"]},{"start":{"row":209,"column":34},"end":{"row":209,"column":35},"action":"insert","lines":["m"]},{"start":{"row":209,"column":35},"end":{"row":209,"column":36},"action":"insert","lines":["a"]},{"start":{"row":209,"column":36},"end":{"row":209,"column":37},"action":"insert","lines":["i"]},{"start":{"row":209,"column":37},"end":{"row":209,"column":38},"action":"insert","lines":["l"]}],[{"start":{"row":208,"column":56},"end":{"row":209,"column":0},"action":"insert","lines":["",""],"id":2702},{"start":{"row":209,"column":0},"end":{"row":209,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":209,"column":8},"end":{"row":210,"column":40},"action":"insert","lines":["if user is None:","    return redirect(url_for(\"register\"))"],"id":2703}],[{"start":{"row":209,"column":4},"end":{"row":209,"column":8},"action":"remove","lines":["    "],"id":2704}],[{"start":{"row":210,"column":4},"end":{"row":210,"column":5},"action":"insert","lines":[" "],"id":2705},{"start":{"row":210,"column":5},"end":{"row":210,"column":6},"action":"insert","lines":[" "]},{"start":{"row":210,"column":6},"end":{"row":210,"column":7},"action":"insert","lines":[" "]}],[{"start":{"row":210,"column":7},"end":{"row":210,"column":8},"action":"insert","lines":[" "],"id":2706}],[{"start":{"row":209,"column":4},"end":{"row":209,"column":5},"action":"insert","lines":["#"],"id":2707}],[{"start":{"row":210,"column":8},"end":{"row":210,"column":9},"action":"insert","lines":["#"],"id":2708}],[{"start":{"row":209,"column":4},"end":{"row":209,"column":5},"action":"remove","lines":["#"],"id":2709}],[{"start":{"row":210,"column":8},"end":{"row":210,"column":9},"action":"remove","lines":["#"],"id":2710}],[{"start":{"row":196,"column":0},"end":{"row":225,"column":66},"action":"remove","lines":["@app.route('/login', methods=['POST', 'GET'])","def login():","    # check for logged in user","    email = session.get('email')","    print(session.get('email'))","    if email:","        return redirect(url_for('register'))","","    user = None","    if request.method == 'POST':","        email = request.form[\"email\"]","        print(session.get('email'))","        user = mongo.db.users.find_one({\"email\": email})","    if user is None:","        return redirect(url_for(\"register\"))","        session['email'] = user['email']","        try:","            assert(user[\"password\"] == request.form[\"password\"])","        except (AssertionError, TypeError):","            return render_template('login.html', title='Login', user=None, error=\"incorrect_login\")","        else:","            try:","                session['name'] = user['name']","            except KeyError:","                session['name'] = 'John Doe'","            session['email'] = email","            print(session.get('email'))","            return redirect(url_for(\"home\"))","","    return render_template('login.html', title='Login', user=user)"],"id":2714},{"start":{"row":196,"column":0},"end":{"row":223,"column":66},"action":"insert","lines":["@app.route('/login', methods=['POST', 'GET'])","def login():","    # check for logged in user","    email = session.get('email')","    print(session.get('email'))","    if email:","        return redirect(url_for('register'))","    user = None","    if request.method == 'POST':","        email = request.form[\"email\"]","        print(session.get('email'))","        user = mongo.db.users.find_one({\"email\": email})","        if user is None:","            return redirect(url_for(\"register\"))","        session['name'] = user['name']","        try:","            assert(user[\"password\"] == request.form[\"password\"])","        except (AssertionError, TypeError):","            return render_template('login.html', title='Login', user=None, error=\"incorrect_login\")","        else:","            try:","                session['name'] = user['name']","            except KeyError:","                session['name'] = 'John Doe'","            session['email'] = email","            print(session.get('email'))","            return redirect(url_for(\"home\"))","    return render_template('login.html', title='Login', user=user)"]}],[{"start":{"row":208,"column":24},"end":{"row":209,"column":0},"action":"insert","lines":["",""],"id":2715},{"start":{"row":209,"column":0},"end":{"row":209,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":209,"column":12},"end":{"row":209,"column":60},"action":"insert","lines":["flash('Congratulation!!You are registered now!')"],"id":2716}],[{"start":{"row":209,"column":56},"end":{"row":209,"column":57},"action":"remove","lines":["w"],"id":2717},{"start":{"row":209,"column":55},"end":{"row":209,"column":56},"action":"remove","lines":["o"]},{"start":{"row":209,"column":54},"end":{"row":209,"column":55},"action":"remove","lines":["n"]},{"start":{"row":209,"column":53},"end":{"row":209,"column":54},"action":"remove","lines":[" "]},{"start":{"row":209,"column":52},"end":{"row":209,"column":53},"action":"remove","lines":["d"]},{"start":{"row":209,"column":51},"end":{"row":209,"column":52},"action":"remove","lines":["e"]},{"start":{"row":209,"column":50},"end":{"row":209,"column":51},"action":"remove","lines":["r"]},{"start":{"row":209,"column":49},"end":{"row":209,"column":50},"action":"remove","lines":["e"]},{"start":{"row":209,"column":48},"end":{"row":209,"column":49},"action":"remove","lines":["t"]},{"start":{"row":209,"column":47},"end":{"row":209,"column":48},"action":"remove","lines":["s"]},{"start":{"row":209,"column":46},"end":{"row":209,"column":47},"action":"remove","lines":["i"]},{"start":{"row":209,"column":45},"end":{"row":209,"column":46},"action":"remove","lines":["g"]},{"start":{"row":209,"column":44},"end":{"row":209,"column":45},"action":"remove","lines":["e"]},{"start":{"row":209,"column":43},"end":{"row":209,"column":44},"action":"remove","lines":["r"]},{"start":{"row":209,"column":42},"end":{"row":209,"column":43},"action":"remove","lines":[" "]},{"start":{"row":209,"column":41},"end":{"row":209,"column":42},"action":"remove","lines":["e"]},{"start":{"row":209,"column":40},"end":{"row":209,"column":41},"action":"remove","lines":["r"]},{"start":{"row":209,"column":39},"end":{"row":209,"column":40},"action":"remove","lines":["a"]},{"start":{"row":209,"column":38},"end":{"row":209,"column":39},"action":"remove","lines":[" "]},{"start":{"row":209,"column":37},"end":{"row":209,"column":38},"action":"remove","lines":["u"]},{"start":{"row":209,"column":36},"end":{"row":209,"column":37},"action":"remove","lines":["o"]},{"start":{"row":209,"column":35},"end":{"row":209,"column":36},"action":"remove","lines":["Y"]},{"start":{"row":209,"column":34},"end":{"row":209,"column":35},"action":"remove","lines":["!"]},{"start":{"row":209,"column":33},"end":{"row":209,"column":34},"action":"remove","lines":["!"]},{"start":{"row":209,"column":32},"end":{"row":209,"column":33},"action":"remove","lines":["n"]},{"start":{"row":209,"column":31},"end":{"row":209,"column":32},"action":"remove","lines":["o"]},{"start":{"row":209,"column":30},"end":{"row":209,"column":31},"action":"remove","lines":["i"]},{"start":{"row":209,"column":29},"end":{"row":209,"column":30},"action":"remove","lines":["t"]},{"start":{"row":209,"column":28},"end":{"row":209,"column":29},"action":"remove","lines":["a"]},{"start":{"row":209,"column":27},"end":{"row":209,"column":28},"action":"remove","lines":["l"]},{"start":{"row":209,"column":26},"end":{"row":209,"column":27},"action":"remove","lines":["u"]},{"start":{"row":209,"column":25},"end":{"row":209,"column":26},"action":"remove","lines":["t"]},{"start":{"row":209,"column":24},"end":{"row":209,"column":25},"action":"remove","lines":["a"]},{"start":{"row":209,"column":23},"end":{"row":209,"column":24},"action":"remove","lines":["r"]},{"start":{"row":209,"column":22},"end":{"row":209,"column":23},"action":"remove","lines":["g"]}],[{"start":{"row":209,"column":21},"end":{"row":209,"column":22},"action":"remove","lines":["n"],"id":2718},{"start":{"row":209,"column":20},"end":{"row":209,"column":21},"action":"remove","lines":["o"]},{"start":{"row":209,"column":19},"end":{"row":209,"column":20},"action":"remove","lines":["C"]}],[{"start":{"row":209,"column":19},"end":{"row":209,"column":20},"action":"insert","lines":["Y"],"id":2719},{"start":{"row":209,"column":20},"end":{"row":209,"column":21},"action":"insert","lines":["o"]},{"start":{"row":209,"column":21},"end":{"row":209,"column":22},"action":"insert","lines":["u"]}],[{"start":{"row":209,"column":22},"end":{"row":209,"column":23},"action":"insert","lines":[" "],"id":2720},{"start":{"row":209,"column":23},"end":{"row":209,"column":24},"action":"insert","lines":["h"]},{"start":{"row":209,"column":24},"end":{"row":209,"column":25},"action":"insert","lines":["a"]},{"start":{"row":209,"column":25},"end":{"row":209,"column":26},"action":"insert","lines":["v"]},{"start":{"row":209,"column":26},"end":{"row":209,"column":27},"action":"insert","lines":["e"]}],[{"start":{"row":209,"column":27},"end":{"row":209,"column":28},"action":"insert","lines":[" "],"id":2721},{"start":{"row":209,"column":28},"end":{"row":209,"column":29},"action":"insert","lines":["t"]},{"start":{"row":209,"column":29},"end":{"row":209,"column":30},"action":"insert","lines":["o"]}],[{"start":{"row":209,"column":30},"end":{"row":209,"column":31},"action":"insert","lines":[" "],"id":2722}],[{"start":{"row":209,"column":31},"end":{"row":209,"column":32},"action":"insert","lines":["R"],"id":2723}],[{"start":{"row":209,"column":32},"end":{"row":209,"column":33},"action":"insert","lines":["e"],"id":2724},{"start":{"row":209,"column":33},"end":{"row":209,"column":34},"action":"insert","lines":["g"]},{"start":{"row":209,"column":34},"end":{"row":209,"column":35},"action":"insert","lines":["i"]},{"start":{"row":209,"column":35},"end":{"row":209,"column":36},"action":"insert","lines":["s"]},{"start":{"row":209,"column":36},"end":{"row":209,"column":37},"action":"insert","lines":["t"]},{"start":{"row":209,"column":37},"end":{"row":209,"column":38},"action":"insert","lines":["e"]}],[{"start":{"row":209,"column":38},"end":{"row":209,"column":39},"action":"insert","lines":["r"],"id":2725}],[{"start":{"row":209,"column":39},"end":{"row":209,"column":40},"action":"insert","lines":[" "],"id":2726}],[{"start":{"row":209,"column":40},"end":{"row":209,"column":41},"action":"insert","lines":["f"],"id":2727},{"start":{"row":209,"column":41},"end":{"row":209,"column":42},"action":"insert","lines":["i"]},{"start":{"row":209,"column":42},"end":{"row":209,"column":43},"action":"insert","lines":["r"]},{"start":{"row":209,"column":43},"end":{"row":209,"column":44},"action":"insert","lines":["s"]},{"start":{"row":209,"column":44},"end":{"row":209,"column":45},"action":"insert","lines":["t"]}],[{"start":{"row":201,"column":13},"end":{"row":202,"column":0},"action":"insert","lines":["",""],"id":2728},{"start":{"row":202,"column":0},"end":{"row":202,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":202,"column":8},"end":{"row":202,"column":44},"action":"insert","lines":["flash('You have to Register first!')"],"id":2729}],[{"start":{"row":202,"column":8},"end":{"row":202,"column":44},"action":"remove","lines":["flash('You have to Register first!')"],"id":2730},{"start":{"row":202,"column":4},"end":{"row":202,"column":8},"action":"remove","lines":["    "]}],[{"start":{"row":202,"column":0},"end":{"row":202,"column":4},"action":"remove","lines":["    "],"id":2731},{"start":{"row":201,"column":13},"end":{"row":202,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":209,"column":12},"end":{"row":209,"column":48},"action":"remove","lines":["flash('You have to Register first!')"],"id":2732},{"start":{"row":209,"column":8},"end":{"row":209,"column":12},"action":"remove","lines":["    "]},{"start":{"row":209,"column":4},"end":{"row":209,"column":8},"action":"remove","lines":["    "]},{"start":{"row":209,"column":0},"end":{"row":209,"column":4},"action":"remove","lines":["    "]},{"start":{"row":208,"column":24},"end":{"row":209,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":208,"column":24},"end":{"row":209,"column":0},"action":"insert","lines":["",""],"id":2733},{"start":{"row":209,"column":0},"end":{"row":209,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":209,"column":12},"end":{"row":209,"column":48},"action":"insert","lines":["flash('You have to Register first!')"],"id":2734}]]},"ace":{"folds":[],"scrolltop":2708,"scrollleft":0,"selection":{"start":{"row":209,"column":48},"end":{"row":209,"column":48},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":19,"state":"start","mode":"ace/mode/python"}},"timestamp":1568746388682,"hash":"ff0750b67966c58ab10c84947333b17f70f00f10"}